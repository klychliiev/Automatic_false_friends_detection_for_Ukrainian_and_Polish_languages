import streamlit as st 
from openai import APIConnectionError, AuthenticationError
from file_manager import FileManager
from settings_config import * 
import json 

st.set_page_config(
    layout="wide", 
    page_title="–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –∫–æ–≥–Ω–∞—Ç—ñ–≤",
    page_icon="üì¢"
)

with st.sidebar:
    st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π")
    model = st.selectbox(
        "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: ",
        ("GPT", "Claude")
    )
    key = st.text_input(
        f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–ª—é—á –¥–ª—è –º–æ–¥–µ–ª—ñ {model}:",
        type="password"
    )

    file_manager = FileManager(api_key=key)
    
    key_submit = st.button("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")

    if key_submit and not key:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–ª—é—á.")

    st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É –ø—Ä–æ–≥—Ä–∞–º–∏")

    # checkbox_wiki = st.checkbox("–î–æ–¥–∞—Ç–∏ –ª—ñ–Ω–≥–≤—ñ—Å—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ Wiktionary")
    checkbox_cognates = st.checkbox("–í–∫–ª—é—á–∞—Ç–∏ –∫–æ–≥–Ω–∞—Ç–∏")
    checkbox_json = st.checkbox("–í–∫–ª—é—á–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é JSON")

main_tab, info_tab = st.tabs(["–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", "–î–æ–¥–∞—Ç–∫–æ–≤–æ"])

def create(uk, pl):
    uk_text = uk.read().decode('utf-8')
    pl_text = pl.read().decode('utf-8')

    uk_lemmas, pl_lemmas = file_manager.process_text(uk_text, pl_text)

    word_pairs, cont = file_manager.create_candidate_pairs(uk_lemmas, pl_lemmas)

    if model=="GPT":
        result = file_manager.find_false_friends(word_pairs, cont)
    else: 
        result = file_manager.find_false_friends_claude(word_pairs, cont)

    return result

with main_tab: 
    st.header("–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –∫–æ–≥–Ω–∞—Ç—ñ–≤")
    st.subheader("–ó–Ω–∞–π–¥–∏ —Ö–∏–±–Ω—ñ –¥—Ä—É–∑—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —É –≤–ª–∞—Å–Ω–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö")

    with st.expander("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"):
        ### –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
        st.markdown("""
        ### –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:
        1. **–û–±–µ—Ä—ñ—Ç—å –º–æ–≤–Ω—É –º–æ–¥–µ–ª—å** –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞.
        2. **–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á** –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –º–æ–≤–Ω–æ—ó –º–æ–¥–µ–ª—ñ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏".
        3. –û–±–µ—Ä—ñ—Ç—å –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ **–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏** –≤–∏–≤–æ–¥—É –ø—Ä–æ–≥—Ä–∞–º–∏.
        4. **–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ç–µ–∫—Å—Ç–∏** - —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –ø–æ–ª—å—Å—å–∫–æ—é –º–æ–≤–∞–º–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–û–∫".
        5. –ó–∞—á–µ–∫–∞–π—Ç–µ 5-15 —Å–µ–∫—É–Ω–¥ –¥–æ–ø–æ–∫–∏ –∑–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
            """)
    st.markdown("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∏, –æ–¥–∏–Ω –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º–æ–≤–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º, —ñ–Ω—à–∏–π - –ø–æ–ª—å—Å—å–∫–æ–º–æ–≤–Ω–∏–º.")
    uk = st.file_uploader("ukr", type="txt", accept_multiple_files=True, label_visibility="collapsed")

    submit_button = st.button("–û–∫")

    if submit_button and len(uk) == 2:
        # try:
            result = create(uk[0], uk[1])
            filtered_result = result
            
            if not checkbox_cognates:
                filtered_result['word_pairs'] = [pair for pair in result['word_pairs'] if pair['false_friends'] == 'True']

            if checkbox_json:
                st.json(filtered_result)
                result_json = json.dumps(filtered_result, ensure_ascii=False, indent=4)
                st.download_button(
                    label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏",
                    data=result_json,
                    file_name="result.json",
                    mime="application/json"
                )
            else:
                # Parsing result and displaying it in a readable format
                st.markdown("---")  # Add a divider
                for item in filtered_result['word_pairs']:
                    pair = item['pair']
                    for word in pair:
                        st.markdown(f"**{word.capitalize()}**: {pair[word]['sentence'][0]}")
                        
                    if checkbox_cognates:
                        st.markdown(f"**–•–∏–±–Ω—ñ –¥—Ä—É–∑—ñ**: {'—Ç–∞–∫' if item['false_friends'] == 'True' else '–Ω—ñ'}")
                    # st.markdown(f"**Explanation**: {item['explanation']}")
                    st.markdown("---")  # Add a divider
                    
        # except (AuthenticationError, UnicodeEncodeError, APIConnectionError) as e:
        #     st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

with info_tab: 
    st.header("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ö–∏–±–Ω—ñ –¥—Ä—É–∑—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞")
    st.markdown("**–ö–æ–≥–Ω–∞—Ç–∏** ‚Äì –ª–µ–∫—Å–µ–º–∏, —â–æ –º–∞—é—Ç—å —Å—Ö–æ–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —É –¥–≤–æ—Ö —á–∏ –±—ñ–ª—å—à–µ –º–æ–≤–∞—Ö —ñ –ø—Ä–∏ —Ü—å–æ–º—É –º–∞—é—Ç—å —Å–ø—ñ–ª—å–Ω–µ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è.")
