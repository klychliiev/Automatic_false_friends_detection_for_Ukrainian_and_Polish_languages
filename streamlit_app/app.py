import json
from openai import APIConnectionError, AuthenticationError
import streamlit as st
import pandas as pd 
from file_manager import FileManager
from prompt import template
from settings_config import *

st.set_page_config(
    layout="wide",
    page_title="–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –∫–æ–≥–Ω–∞—Ç—ñ–≤",
    page_icon="üì¢",
)

# Sidebar configuration
with st.sidebar:
    st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π")
    model = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: ", ("GPT-4", ""))
    key = st.text_input(f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–ª—é—á –¥–ª—è –º–æ–¥–µ–ª—ñ {model}:", type="password")

    file_manager = FileManager(api_key=key)
    key_submit = st.button("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")

    if key_submit and not key:
        st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–ª—é—á.")

    st.subheader("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–≤–æ–¥—É –ø—Ä–æ–≥—Ä–∞–º–∏")
    checkbox_cognates = st.checkbox("–í–∫–ª—é—á–∞—Ç–∏ –∫–æ–≥–Ω–∞—Ç–∏")
    checkbox_json = st.checkbox("–í–∫–ª—é—á–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é JSON")

# Main tabs
main_tab, info_tab = st.tabs(["–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä", "–î–æ–¥–∞—Ç–∫–æ–≤–æ"])

# Function to create and process the texts
def create(uk, pl):
    uk_text = uk.read().decode("utf-8")
    pl_text = pl.read().decode("utf-8")

    uk_lemmas, pl_lemmas = file_manager.process_text(uk_text, pl_text)
    word_pairs, cont = file_manager.create_candidate_pairs(uk_lemmas, pl_lemmas)
    result = file_manager.find_false_friends(template, word_pairs, cont)

    return result

# Main tab content
with main_tab:
    st.header("–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –∫–æ–≥–Ω–∞—Ç—ñ–≤")
    st.subheader("–ó–Ω–∞–π–¥–∏ —Ö–∏–±–Ω—ñ –¥—Ä—É–∑—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —É –≤–ª–∞—Å–Ω–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö")

    with st.expander("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"):
        st.markdown(
            """
            1. –ú–æ–≤–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî **GPT-4**.
            2. **–í–≤–µ–¥—ñ—Ç—å API –∫–ª—é—á** –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ GPT-4 —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏".
            3. –û–±–µ—Ä—ñ—Ç—å –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ **–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏** –≤–∏–≤–æ–¥—É –ø—Ä–æ–≥—Ä–∞–º–∏.
            4. **–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ç–µ–∫—Å—Ç–∏** ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –ø–æ–ª—å—Å—å–∫–æ—é –º–æ–≤–∞–º–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–û–∫".
            5. –ó–∞—á–µ–∫–∞–π—Ç–µ –¥–µ—è–∫–∏–π —á–∞—Å –¥–æ–ø–æ–∫–∏ –∑–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –≤—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
            """
        )

    st.markdown("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∏, –æ–¥–∏–Ω –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º–æ–≤–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º, —ñ–Ω—à–∏–π ‚Äî –ø–æ–ª—å—Å—å–∫–æ–º–æ–≤–Ω–∏–º.")
    uk = st.file_uploader("ukr", type="txt", accept_multiple_files=True, label_visibility="collapsed")

    submit_button = st.button("–û–∫")

    if submit_button and len(uk) == 2:
        try:
            result = create(uk[0], uk[1])
            st.session_state['result'] = result  # Store the result in session state

        except (AuthenticationError, UnicodeEncodeError, APIConnectionError) as e:
            st.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

# Main tab result display logic
with main_tab:
    # Check if the result is in the session state
    if 'result' in st.session_state:
        result = st.session_state['result']

        filtered_result = result.copy()
        if not checkbox_cognates:
            filtered_result["word_pairs"] = [
                pair for pair in result["word_pairs"] if pair["false_friends"] == "True"
            ]

        if checkbox_json:
            st.json(filtered_result)
            result_json = json.dumps(filtered_result, ensure_ascii=False, indent=4)
            st.download_button(
                label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏",
                data=result_json,
                file_name="result.json",
                mime="application/json",
            )
        else:
            # Parsing result and displaying it in a readable format
            st.markdown("---")  # Add a divider
            for item in filtered_result["word_pairs"]:
                pair = item["pair"]
                for word in pair:
                    st.markdown(f"**{word.capitalize()}**: {pair[word]['sentence'][0]}")

                if checkbox_cognates:
                    st.markdown(f"**–•–∏–±–Ω—ñ –¥—Ä—É–∑—ñ**: {'—Ç–∞–∫' if item['false_friends'] == 'True' else '–Ω—ñ'}")
                st.markdown("---")  # Add a divider

# Info tab content
with info_tab:
    st.header("–õ—ñ–Ω–≥–≤—ñ—Å—Ç–∏—á–Ω–∞ –±–∞–∑–∞ —Ä–æ–∑—Ä–æ–±–∫–∏")
    st.markdown(
        "**–ö–æ–≥–Ω–∞—Ç–∏** ‚Äì –ª–µ–∫—Å–µ–º–∏, —â–æ –º–∞—é—Ç—å —Å—Ö–æ–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —É –¥–≤–æ—Ö —á–∏ –±—ñ–ª—å—à–µ –º–æ–≤–∞—Ö —ñ –ø—Ä–∏ —Ü—å–æ–º—É –º–∞—é—Ç—å —Å–ø—ñ–ª—å–Ω–µ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è."
    )
    st.markdown("–ü—Ä–∏–∫–ª–∞–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ-–ø–æ–ª—å—Å—å–∫–∏—Ö –∫–æ–≥–Ω–∞—Ç—ñ–≤:")
    st.dataframe(pd.DataFrame({
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–µ —Å–ª–æ–≤–æ': ['—Å–Ω—ñ–¥–∞–Ω–æ–∫', '–Ω–∞–ø—ñ–π', '—Å—ñ–ª—å', '–º º—è—Å–æ', '—á–∞—Å'],
        '–ü–æ–ª—å—Å—å–∫–µ —Å–ª–æ–≤–æ': ['≈õniadanie', 'nap√≥j', 's√≥l', 'miƒôso', 'czas']
    }))
    
    st.markdown(
        "**–•–∏–±–Ω—ñ –¥—Ä—É–∑—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞** ‚Äì —Å–ª–æ–≤–∞, —è–∫—ñ –º–∞—é—Ç—å —Å—Ö–æ–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —É –¥–≤–æ—Ö —á–∏ –±—ñ–ª—å—à–µ –º–æ–≤–∞—Ö, –∞–ª–µ –º–∞—é—Ç—å —Ä—ñ–∑–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è."
    )
    st.markdown("–ü—Ä–∏–∫–ª–∞–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ-–ø–æ–ª—å—Å—å–∫–∏—Ö —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞:")
    st.dataframe(pd.DataFrame({
        '–£–∫—Ä–∞—ó–Ω—Å—å–∫–µ —Å–ª–æ–≤–æ': ['–∞–Ω–≥–µ–ª—å—Å—å–∫–∏–π', '–≥–∞—Ä–±—É–∑', '–±–∞–π–∫–∞', '–¥–∏–Ω—è', '—á–∞—à–∫–∞'],
        '–ü–æ–ª—å—Å—å–∫–µ —Å–ª–æ–≤–æ': ['angielski', 'arbuz', 'bajka', 'dynia', 'czaszka']
    }))

    st.header("–ü—Ä–æ–≥—Ä–∞–º–Ω–∞ –±–∞–∑–∞ —Ä–æ–∑—Ä–æ–±–∫–∏")
    st.markdown(
        """
        **–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –∫–æ–≥–Ω–∞—Ç—ñ–≤** ‚Äì –ø—Ä–æ–≥—Ä–∞–º–∞, —è–∫–∞ –≤–∏—è–≤–ª—è—î —Ö–∏–±–Ω—ñ –¥—Ä—É–∑—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –∫–æ–≥–Ω–∞—Ç–∏ —É –≤—Ö—ñ–¥–Ω–∏—Ö —Ç–µ–∫—Å—Ç–∞—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –Ω–∞–ø–∏—Å–∞–Ω–∏—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –ø–æ–ª—å—Å—å–∫–æ—é –º–æ–≤–∞–º–∏.
        """
    )
    st.markdown("**–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏:**")
    st.markdown("1. –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤, –Ω–∞–¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –ü—ñ—Å–ª—è –≤–∏–≤–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ñ–∞–π–ª—ñ–≤ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —ó—Ö–Ω—è –æ–±—Ä–æ–±–∫–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±—ñ–±–ª–æ—Ç–µ–∫–∏ spacy —Ç–∞ —ó—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ç–∞ –ø–æ–ª—å—Å—å–∫–æ—ó –º–æ–≤. –û–±—Ä–æ–±–∫–∞ –≤–∫–ª—é—á–∞—î —Ç–æ–∫–µ–Ω—ñ–∑–∞—Ü—ñ—é, –ª–µ–º–∞—Ç–∏–∑–∞—Ü—ñ—é —Ç–µ–∫—Å—Ç—ñ–≤, –∞ —Ç–∞–∫–æ–∂ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–æ–ø-—Å–ª—ñ–≤. ")
    st.markdown("2. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ª–µ–∫—Å–∏—á–Ω–∏—Ö –ø–∞—Ä-–∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤. –ù–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö –ø–∞—Ä —Å–ª—ñ–≤ –≤–∏–æ–∫—Ä–µ–º–ª—é—é—Ç—å—Å—è —Ç—ñ, —â–æ –º–∞—é—Ç—å –≤–∏—Å–æ–∫–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–æ—ó –ø–æ–¥—ñ–±–Ω–æ—Å—Ç—ñ. –°–∞–º–µ —Ü—ñ —Å–ª–æ–≤–∞ —î –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º–∏ –∫–æ–≥–Ω–∞—Ç–∞–º–∏ –∞–±–æ —Ö–∏–±–Ω–∏–º–∏ –¥—Ä—É–∑—è–º–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞, —è–∫—ñ –±—É–¥—É—Ç—å –ø—Ä–æ–∫–ª–∞—Å–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –µ—Ç–∞–ø—ñ. ")
    st.markdown("3. –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ö–∏–±–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –∫–æ–≥–Ω–∞—Ç—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–≤–Ω–æ—ó –º–æ–¥–µ–ª—ñ GPT-4 —Ç–∞ —Ç–µ—Ö–Ω—ñ–∫–∏ Few-shot learning.")
